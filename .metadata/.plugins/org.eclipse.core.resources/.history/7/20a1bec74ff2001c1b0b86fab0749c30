package jpanels;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

import javax.swing.Timer;

import button.CircleButton;
import frame.Frame;

public class Hint extends Game {

	/**
	 * Create the panel.
	 */
	private boolean pause = false;
	private int index = 0;
	private List<int[]> step = new ArrayList<int[]>();
	
	public Hint(){
		super();
		setAllowMove(true);
		setAllowPick(false);
		solution();
		
		CircleButton btnNext = new CircleButton(50, 7);
		btnNext.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				moveNext();
			}
		});
		btnNext.setBounds(675, 550, 50, 50);
		add(btnNext);
		
		CircleButton btnBack = new CircleButton(50, 1);
		btnBack.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				moveBack();
			}
		});
		btnBack.setBounds(400, 550, 50, 50);
		add(btnBack);
		
		CircleButton btnPlay = new CircleButton(50, 3);
		btnPlay.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				Frame.gameOn();
			}
		});
		btnPlay.setBounds(110, 11, 50, 50);
		add(btnPlay);
		
		
		add(background);
		
		CircleButton btnPause = new CircleButton(50, 3);
		btnPause.setBounds(538, 550, 50, 50);
		btnPause.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(isPause()==false)
					setPause(true);
				else 
					setPause(false);
			}
		});
		add(btnPause);
		autoRun();
	}
	
	
	public void moveNext() {
		index = Math.min(step.size(), index);
		if(index >= step.size()) {
			notiNotLegal();
			return;
		}
					
		int from = step.get(index)[0];
		int to = step.get(index)[1];
		moveDisk(from, to);
		index++;
	}
	
	public void moveBack() {
		index--;
		index = Math.max(0, index);
		
		int from = step.get(index)[1];
		int to = step.get(index)[0];
		moveDisk(from, to);
	}
	
	public void autoRun() {
		Timer timer = new Timer(1000, new ActionListener() {
			  @Override
			  public void actionPerformed(ActionEvent arg0) {
			    	if(isPause()==false)
			    		moveNext();
			    	else return;
			  }
			});
			timer.setRepeats(false); // Only execute once
			timer.start(); // Go go go!
	}
	
	/* 
	 * public void notiNotLegal() {
		lblNoti.setVisible(true);
		
		int delay = 1300; //milliseconds
		ActionListener taskPerformer = new ActionListener() {
          public void actionPerformed(ActionEvent evt) {
                lblNoti.setVisible(false);
            }
        };
        Timer tick = new Timer(delay,taskPerformer);
        tick.setRepeats(false);
        tick.start();
		
	}
	 * 
	 */
	
	public void solution() {
		recusive(GamePlay.height, 1, 3, 2);
	}
	
	public void recusive(int height, int A, int C, int B) {
		if(height==0)
			return;
		recusive(height-1, A, B, C);
		int arr[] = {A, C};
		step.add(arr);
		recusive(height-1, B, C, A);
	}


	public boolean isPause() {
		return pause;
	}


	public void setPause(boolean pause) {
		this.pause = pause;
	}
}
